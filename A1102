#include<stdio.h>
#include<string.h>
#include<iostream>
#include<algorithm>
#include<string>
#include<cstdio>
#include<queue>
using namespace std;
const int maxn=110;
struct node{
	int lchild,rchild;
}Node[maxn];
int n,num;
bool notRoot[maxn]={false};

int strToNum(char c){
	if(c=='-'){
		return -1;
	}
	else{
		notRoot[c-'0']=true;
		return c-'0';
	}
}

int findRoot(){
	for(int i=0;i<n;i++){
		if(notRoot[i]==false){
			return i;
		}
	}
}

void print(int id){
	printf("%d",id);
	num++;
	if(num<n)printf(" ");
	else printf("\n");
}

void BFS(int root){
	queue<int> q;
	q.push(root);
	while(!q.empty()){
		int now=q.front();
		q.pop();
		print(now);
		if(Node[now].rchild!=-1)q.push(Node[now].rchild);
		if(Node[now].lchild!=-1)q.push(Node[now].lchild);
	}
}

void inOrder(int root){
	if(root==-1){
		return;
	}
	inOrder(Node[root].rchild);
	print(root);
	inOrder(Node[root].lchild);
}

int main(){
	char lchild,rchild;
	scanf("%d",&n);
	for(int i=0;i<n;i++){
		scanf("%*c%c %c",&lchild,&rchild);
		Node[i].lchild=strToNum(lchild);
		Node[i].rchild=strToNum(rchild);
	}
	int root=findRoot();
	BFS(root);
	num=0;
	inOrder(root);
	return 0;
}
